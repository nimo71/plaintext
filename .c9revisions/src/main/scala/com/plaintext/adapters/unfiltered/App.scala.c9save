{"ts":1366373060464,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package com.plaintext.adapters.unfiltered\n\n\nimport com.plaintext.adapters.File\nimport com.plaintext.adapters.JSON\nimport com.plaintext.domain.forms.RegistrationForm\nimport javax.servlet.http.HttpServletResponse\nimport unfiltered.filter._\nimport unfiltered.request._\nimport unfiltered.response._\n\n\nobject RegisterResponder {\n\tdef apply(json: String): ResponseFunction[HttpServletResponse] = {\n\t\tif (json == null || json == \"\") \n\t\t\t\tBadRequest ~> ResponseString(\"\"\"{ \n\t\t\t\t\t\t\"error\" : {\n\t\t\t\t\t\t\t\"message\" : \"Expected request body\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\"\"\")\n\t\t\telse {\n\t\t\t\tval tree = JSON.parseJSON(json)\t\t\n\t\t\t\tval email = tree(\"email\").toString\n\t\t\t\tval confirmEmail = tree(\"confirmEmail\").toString\n\t\t\t\tval password = tree(\"password\").toString\n\t\t\t\tval confirmPassword = tree(\"confirmPassword\").toString\n\n\t\t\t\tRegistrationForm(email, confirmEmail, password, confirmPassword)\n\n\t\t\t\tOk ~> ResponseString(\"success\")\n\t\t\t}\n\t}\n}\n\nobject Api {\n\n\tdef intent = Intent {\n\t\tcase req @ PUT(Path(Seg(\"api\" :: \"account\" :: _))) => {// & Accepts.Json(r)) => {\n\t\t\tRegisterResponder(Body.string(req))\n\t\t}\n\t\tcase _ => Pass\n\t}\n}\n\nobject Static {\n\t\n\tdef intent = Intent {\n  \t\tcase Path(p) => {\n\t\t\ttry {\n\t\t\t\tval responseContent = new File(\"src/main/resources/www/%s\".format(p)).content\n\t\t\t\tval Filename = \"\"\"(.*)[.]([^.]*)\"\"\".r\n\t\t\t\tp match {\n\t\t\t\t\tcase Filename(_, \"html\") => Ok ~> HtmlContent ~> ResponseString(responseContent)\n\t\t\t\t\tcase Filename(_, \"css\") => Ok ~> CssContent ~> ResponseString(responseContent)\n\t\t\t\t\tcase Filename(_, \"js\") => Ok ~> JsContent ~> ResponseString(responseContent) \n\t\t\t\t\tcase _ => Ok ~> ResponseString(responseContent)\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch {\n\t\t  \t\tcase _ => NotFound ~> ResponseString(new File(\"src/main/resources/www/404.html\").content)\n\t\t\t}\n  \t\t}\n\t}\n}\n\nobject App extends unfiltered.filter.Plan {\n\tdef intent = Api.intent.onPass(Static.intent)\n}"]],"start1":0,"start2":0,"length1":0,"length2":1838}]],"length":1838}
{"contributors":[],"silentsave":false,"ts":1366374621142,"patch":[[{"diffs":[[0,"ord)"],[-1,"\n\n\t\t\t\tOk ~> ResponseString(\"success\")"],[1," matches {\n    \t\t\t    case valid: ValidForm => {\n                        val responseJson = UserJsonSerialiser(UserRepository.createAccount(email, password)).serialise()\n                        Ok ~> ResponseString(responseJson)\n    \t\t\t    }\n                    case invalid: InvalidForm => \n                        val responseJson = RegistrationFormJsonSerialiser(invalid).serialise()\n                        BadRequest ~> ResponseString(responseJson)\n\t\t\t\t}"],[0,"\n\t\t\t"]],"start1":855,"start2":855,"length1":45,"length2":467}]],"length":2260,"saved":false}
{"ts":1366374696040,"patch":[[{"diffs":[[0,"Form => "],[1,"{"],[0,"\n       "]],"start1":1142,"start2":1142,"length1":16,"length2":17},{"diffs":[[0,"seJson)\n"],[1,"                    }\n                    case _ => ServerError ~> ResponseString(\"Failed to register, please try again later\")\n"],[0,"\t\t\t\t}\n\t\t"]],"start1":1306,"start2":1306,"length1":16,"length2":144}]],"length":2389,"saved":false}
{"ts":1366374753863,"patch":[[{"diffs":[[0,"t Api {\n"],[-1,"\n"],[0,"\tdef int"]],"start1":1464,"start2":1464,"length1":17,"length2":16},{"diffs":[[0,"tatic {\n"],[-1,"\t\n"],[0,"\tdef int"]],"start1":1653,"start2":1653,"length1":18,"length2":16}]],"length":2386,"saved":false}
{"ts":1366374822629,"patch":[[{"diffs":[[0,"d) match"],[-1,"es"],[0," {\n    \t"]],"start1":857,"start2":857,"length1":18,"length2":16}]],"length":2384,"saved":false}
{"ts":1366375054057,"patch":[[{"diffs":[[0,"String\n\n"],[1,"\n                // could use Either[InvalidForm, ValidForm] instead of using polymorphism? \n"],[0,"\t\t\t\tRegi"]],"start1":783,"start2":783,"length1":16,"length2":109}]],"length":2477,"saved":false}
